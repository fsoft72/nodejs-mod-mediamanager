/*
 * This file has been generated by flow2code
 * See: https://flow.liwe.org
 */

import { ILRequest, ILResponse, ILError, ILiWE } from '../../liwe/types';
import { send_error, send_ok, typed_dict } from "../../liwe/utils";
import { locale_load } from '../../liwe/locale';

import { perms } from '../../liwe/auth';

import {
	// endpoints function
	delete_media_delete_items, delete_media_folder_delete, get_media_folder_root, get_media_folders_tree, get_media_get,
	get_media_list, patch_media_folder_rename, post_media_folder_create, post_media_upload, post_media_upload_chunk_add,
	post_media_upload_chunk_start,
	// functions
	
} from './methods';

import {
	Media, MediaBind, MediaBindKeys, MediaFolder, MediaFolderKeys,
	MediaKeys, MediaTreeItem, MediaTreeItemKeys,
} from './types';

/*=== f2c_start __header ===*/
import { mediamanager_db_init } from './methods';
/*=== f2c_end __header ===*/

export const init = ( liwe: ILiWE ) => {
	const app = liwe.app;

	console.log( "    - mediamanager " );

	liwe.cfg.app.languages.map( ( l ) => locale_load( "mediamanager", l ) );
	mediamanager_db_init ( liwe );

	app.post ( '/api/media/upload/chunk/start', perms( [ "media.create" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id_folder, filename, size, ___errors } = typed_dict( req.body, [
			{ name: "id_folder", type: "string", required: true },
			{ name: "filename", type: "string", required: true },
			{ name: "size", type: "number", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		post_media_upload_chunk_start ( req, id_folder, filename, size, ( err: ILError, id_upload: string ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { id_upload } );
		} );
	} );

	app.post ( '/api/media/upload/chunk/add', perms( [ "media.create" ] ), ( req: ILRequest, res: ILResponse ) => {
		let { id_upload, start, ___errors } = typed_dict( req.query, [
			{ name: "id_upload", type: "string", required: true },
			{ name: "start", type: "number", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		post_media_upload_chunk_add ( req, id_upload, start, ( err: ILError, bytes: number ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { bytes } );
		} );
	} );

	app.post ( '/api/media/folder/create', perms( [ "media.folder" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id_parent, name, ___errors } = typed_dict( req.body, [
			{ name: "id_parent", type: "string", required: true },
			{ name: "name", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		post_media_folder_create ( req, id_parent, name, ( err: ILError, folder: MediaFolder ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { folder } );
		} );
	} );

	app.patch ( '/api/media/folder/rename', perms( [ "media.folder" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id_folder, name, ___errors } = typed_dict( req.body, [
			{ name: "id_folder", type: "string", required: true },
			{ name: "name", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		patch_media_folder_rename ( req, id_folder, name, ( err: ILError, folder: MediaFolder ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { folder } );
		} );
	} );

	app.delete ( '/api/media/folder/delete', perms( [ "media.folder_delete" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id_folder, ___errors } = typed_dict( req.body, [
			{ name: "id_folder", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		delete_media_folder_delete ( req, id_folder, ( err: ILError, ok: boolean ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { ok } );
		} );
	} );

	app.get ( '/api/media/folder/root', ( req: ILRequest, res: ILResponse ) => {
		

		get_media_folder_root ( req, ( err: ILError, folder: MediaFolder ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { folder } );
		} );
	} );

	app.get ( '/api/media/list', perms( [ "is-logged" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id_folders, ___errors } = typed_dict( req.query as any, [
			{ name: "id_folders", type: "string[]" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		get_media_list ( req, id_folders, ( err: ILError, medias: Media ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { medias } );
		} );
	} );

	app.get ( '/api/media/get', ( req: ILRequest, res: ILResponse ) => {
		const { id, ___errors } = typed_dict( req.query as any, [
			{ name: "id", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		get_media_get ( req, id, ( err: ILError, media: Media ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { media } );
		} );
	} );

	app.get ( '/api/media/folders/tree', ( req: ILRequest, res: ILResponse ) => {
		const { id_folder, ___errors } = typed_dict( req.query as any, [
			{ name: "id_folder", type: "string" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		get_media_folders_tree ( req, id_folder, ( err: ILError, tree: MediaFolder ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { tree } );
		} );
	} );

	app.delete ( '/api/media/delete/items', perms( [ "media.delete" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { medias, ___errors } = typed_dict( req.body, [
			{ name: "medias", type: "string[]", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		delete_media_delete_items ( req, medias, ( err: ILError, deleted: number ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { deleted } );
		} );
	} );

	app.post ( '/api/media/upload', perms( [ "media.create" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { module, id_folder, ___errors } = typed_dict( req.body, [
			{ name: "module", type: "string" },
			{ name: "id_folder", type: "string" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		post_media_upload ( req, module, id_folder, ( err: ILError, media: Media ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { media } );
		} );
	} );

};
